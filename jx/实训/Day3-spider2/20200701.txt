20200701  Selenium 使用、Python Spider
    获取页面、解析&定位、提取内容
0. 下载浏览器驱动
    官网：
        https://docs.seleniumhq.org/projects/webdriver/
    想使用selenium驱动不同的浏览器，必须单独下载并设置不同的浏览器驱动。
    官方下载页面:
        https://docs.seleniumhq.org/download/
        各浏览器下载地址：（注意版本）
        Firefox浏览器驱动：geckodriver：https://github.com/mozilla/geckodriver/releases
        Chrome浏览器驱动：
            chromedriver：https://sites.google.com/a/chromium.org/chromedriver/home
            Taobao备用地址：https://npm.taobao.org/mirrors/chromedriver
        IE浏览器驱动：IEDriverServer：http://selenium-release.storage.googleapis.com/index.html
        Edge浏览器驱动：MicrosoftWebDriver：https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/
        Opera浏览器驱动：operadriver：https://github.com/operasoftware/operachromiumdriver/releases
        PhantomJS浏览器驱动：phantomjs：http://phantomjs.org/
            headless
1. Selenium = Java 
    0. 下载驱动 & 开发配置
        Chrome 版本 83.0.4103.116（正式版本） （64 位）
        下载：
           下载对应版本的driver - 复制到指定位置
        开发配置：
            1. 指定 Driver 的位置消息 ： 在任意位置可以调用chromedriver.exe
                1 - 侵入式配置
                    编辑 Path 系统变量，加入chromedriver.exe所在的位置 ： c:\dev\webdriver
                2 - 非侵入式配置
                    在程序代码中指定上述位置 - Java 如何获取|修改系统变量？
                    System.setProperty("webdriver.chrome.driver", "c:\\dev\\webdriver\\chromedriver.exe");
            2. 添加依赖 - Maven=pom.xml
                <!-- Selenium 依赖 -->
                <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
                <dependency>
                    <groupId>org.seleniumhq.selenium</groupId>
                    <artifactId>selenium-java</artifactId>
                    <version>3.141.59</version>
                </dependency>
    1. 启动 WebDriver
        // 1. 启动 WebDriver
        // 设置代理
            //        DesiredCapabilities desiredCapabilities = DesiredCapabilities.chrome();
            //        desiredCapabilities.setCapability("chrome.switch", Arrays.asList("--proxy-server=http://user:password@xxx.com:portnum"));
            //        WebDriver browser = new ChromeDriver(desiredCapabilities);
        WebDriver browser = new ChromeDriver();
        String url = "https://www.baidu.com";
        browser.get(url);   // 获取响应页面
        String title = browser.getTitle();
        System.out.println(title);
    2. Selenium 的基本操作
        *1. selenium元素定位
            1.selenium定位方法
                Selenium提供了8种定位方式。
                    id
                    name
                    class name
                    tag name
                    link text
                    partial link text
                    xpath
                    css selector
            2. 定位方法的用法
                通过id定位： 
                    driver.findElement(By.id("kw"))
                通过name定位： 
                    driver.findElement(By.name("wd"))
                通过class name定位： 
                    driver.findElement(By.className("s_ipt"))
                通过tag name定位： 
                    driver.findElement(By.tagName("input"))
                通过xpath定位，xpath定位有N种写法，
                    http://www.w3school.com.cn/xpath/xpath_syntax.asp
                    这里列几个常用写法： 
                    driver.findElement(By.xpath("//*[@id='kw']"))
                    driver.findElement(By.xpath("//*[@name='wd']"))
                    driver.findElement(By.xpath("//input[@class='s_ipt']"))
                    driver.findElement(By.xpath("/html/body/form/span/input"))
                    driver.findElement(By.xpath("//span[@class='soutu-btn']/input"))
                    driver.findElement(By.xpath("//form[@id='form']/span/input"))
                    driver.findElement(By.xpath("//input[@id='kw' and @name='wd']"))
                通过css定位，css定位有N种写法，
                    http://www.w3school.com.cn/cssref/css_selectors.asp
                    这里列几个常用写法： 
                    driver.findElement(By.cssSelector("#kw")
                    driver.findElement(By.cssSelector("[name=wd]")
                    driver.findElement(By.cssSelector(".s_ipt")
                    driver.findElement(By.cssSelector("html > body > form > span > input")
                    driver.findElement(By.cssSelector("span.soutu-btn> input#kw")
                    driver.findElement(By.cssSelector("form#form > span > input")
                页面上有一组文本链接。 
                    <a class="mnav" href="http://news.baidu.com" name="tj_trnews">新闻</a>
                    <a class="mnav" href="http://www.hao123.com" name="tj_trhao123">hao123</a>
                通过link text定位： 
                    driver.findElement(By.linkText("新闻")
                    driver.findElement(By.linkText("hao123")
                通过partialLink text定位： 
                    driver.findElement(By.partialLinkText("新")
                    driver.findElement(By.partialLinkText("hao")
                    driver.findElement(By.partialLinkText("123")
            3. 定位一组元素
                上述8种定位方法是针对单个元素定位的， WebDriver还提供了另外8种用于定位一组元素的方法。
                区别是在单词 findElement 后面多了一个 s
                    import org.openqa.selenium.By;
                    ......
                    findElements(By.id())
                    findElements(By.name())
                    findElements(By.className())
                    findElements(By.tagName())
                    findElements(By.linkText())
                    findElements(By.partialLinkText())
                    findElements(By.xpath())
                    findElements(By.cssSelector())
                举例:
                    WebDriver driver = new ChromeDriver();
                    driver.get("https://www.baidu.com/");
                    WebElement search_text = driver.findElement(By.id("kw"));
                    search_text.sendKeys("selenium");
                    search_text.submit();
                    Thread.sleep(2000);
                    //匹配第一页搜索结果的标题， 循环打印
                    List<WebElement> search_result = driver.findElements(By.xpath("//div/div/h3"));
                    //打印元素的个数
                    System.out.println(search_result.size());
                    // 循环打印搜索结果的标题
                    for(WebElement result : search_result){
                        System.out.println(result.getText());
                    }
                    System.out.println("----------------");
                    //打印第n结果的标题
                    WebElement text = search_result.get(search_result.size() - 10);
                    System.out.println(text.getText());
                    driver.quit();

        2. 控制浏览器操作
            1. 控制浏览器窗口大小
                WebDriver 提供了 manage().window().setSize()方法来设置浏览器的大小。
                    maximize() 设置浏览器最大化
                        driver.manage().window().maximize();
                    setSize() 设置浏览器宽高
                         driver.manage().window().setSize(new Dimension(480, 800));
             2. 控制浏览器后退、前进
                WebDriver提供了对应的back()和forward()方法来模拟后退和前进按钮。
                     //get 到百度首页
                    driver.get("https://www.baidu.com/");
                    //执行浏览器后退
                    driver.navigate().back();
                    System.out.printf("back to %s \n", driver.getCurrentUrl());
                    //执行浏览器前面
                    driver.navigate().forward();
                    System.out.printf("forward to %s \n", driver.getCurrentUrl());
            3. 刷新页面
                手动刷新（F5） 页面。refresh() 刷新页面。
                    //刷新页面
                    driver.navigate().refresh();

        3. WebDriver常用方法
            1. WebDriver 常用方法
                WebDriver 中最常用的几个方法：
                clear() 清除文本。
                    clear()方法用于清除文本输入框中的内容。
                sendKeys(*value) 模拟按键输入。
                    sendKeys()方法模拟键盘向输入框里输入内容。
                    可以用它发送键盘按键， 甚至用它来指定上传的文件。
                click() 单击元素
                    click()方法可以用来单击一个元素，前提是它是可以被单击的对象，与 sendKeys()方法是Web页面操作中最常用到的两个方法。 
                    click()方法不仅仅用于单击一个按钮，还可以单击任何可以单击的文字/图片链接、复选框、单选框、下拉框等
                WebDriver driver = new ChromeDriver();
                driver.get("https://www.baidu.com/");
                WebElement search_text = driver.findElement(By.id("kw"));
                WebElement search_button = driver.findElement(By.id("su"));
                search_text.sendKeys("Java");
                search_text.clear();
                search_text.sendKeys("Selenium");
                search_button.click();
                driver.quit();
            2. 其它常用方法
                submit()
                    submit()方法用于提交表单。 
                        在搜索框输入关键字之后的“回车” 操作， 就可以通过 submit()方法模拟.
                    WebElement search_text = driver.findElement(By.id("kw"));
                    search_text.sendKeys("Selenium");
                    search_text.submit();   //只适合于表单的提交
                getSize() 返回元素的尺寸。
                getText() 获取元素的文本。
                getAttribute(name) 获得属性值。
                isDisplayed() 获取该元素是否用户可见。
                    WebDriver driver = new ChromeDriver();
                    driver.get("https://www.baidu.com/");
                    //获得百度输入框的尺寸
                    WebElement size = driver.findElement(By.id("kw"));
                    System.out.println(size.getSize());
                    //返回百度页面底部备案信息
                    WebElement text = driver.findElement(By.id("cp"));
                    System.out.println(text.getText());
                    //返回元素的属性值， 可以是 id、 name、 type 或元素拥有的其它任意属性
                    WebElement ty = driver.findElement(By.id("kw"));
                    System.out.println(ty.getAttribute("type"));
                    //返回元素的结果是否可见， 返回结果为 True 或 False
                    WebElement display = driver.findElement(By.id("kw"));
                    System.out.println(display.isDisplayed());
                    driver.quit();
                单选框
                    WebElement radio=driver.findElement(By.id("BookMode"));
                    radio.click();　　　　   //选择某个单选项
                    radio.clear();　　　　  //清空某个单选项
                    radio.isSelected();　　//判断某个单选项是否已经被选择
                多选框
                    WebElement checkbox = driver.findElement(By.id("myCheckbox."));
                    checkbox.click();
                    checkbox.clear();
                    checkbox.isSelected();
                    checkbox.isEnabled();

            3. 获取断言信息
                不管是在做功能测试还是自动化测试，最后一步需要拿实际结果与预期进行比较。这个比较的称之为断言。
                通常可以通过获取title 、URL和text等信息进行断言。
                    getTitle()： 用于获得当前页面的title。
                    getCurrentUrl() ： 用户获得当前页面的URL。
                    getText() 获取页面文本信息, 即获取标签对之间的文本信息。
                举例:
                    WebDriver driver = new ChromeDriver();
                    driver.get("https://www.baidu.com");
                    //获取当前的 title 和 url
                    System.out.printf("title of current page is %s\n", driver.getTitle());
                    System.out.printf("url of current page is %s\n", driver.getCurrentUrl());
                    
        *4. 模拟鼠标操作
            WebDriver提供了其他的鼠标交互方式， 例如鼠标右击、双击、悬停、甚至是鼠标拖动等功能。
            在WebDriver中，将这些关于鼠标操作的方法封装在ActionChains类提供。
            Actions 类提供了鼠标操作的常用方法：
                contextClick() 右击
                clickAndHold() 鼠标点击并控制
                doubleClick() 双击
                dragAndDrop() 拖动
                release() 释放鼠标
                perform() 执行所有Actions中存储的行为
            百度首页设置悬停下拉菜单。
                WebDriver driver = new ChromeDriver();
                driver.get("https://www.baidu.com/");
                WebElement search_setting = driver.findElement(By.linkText("设置"));
                Actions action = new Actions(driver);
                action.clickAndHold(search_setting).perform();
                driver.quit();
            import org.openqa.selenium.interactions.Actions;
                导入提供鼠标操作的 ActionChains 类
                Actions(driver) 调用Actions()类，将浏览器驱动driver作为参数传入。
                clickAndHold() 方法用于模拟鼠标悬停操作， 在调用时需要指定元素定位。
                perform() 执行所有ActionChains中存储的行为， 可以理解成是对整个操作的提交动作。
            其他鼠标操作
                Actions action = new Actions(driver);
                // 鼠标右键点击指定的元素
                action.contextClick(driver.findElement(By.id("element"))).perform();
                // 鼠标右键点击指定的元素
                action.doubleClick(driver.findElement(By.id("element"))).perform();
                // 鼠标拖拽动作， 将 source 元素拖放到 target 元素的位置。
                WebElement source = driver.findElement(By.name("element"));
                WebElement target = driver.findElement(By.name("element"));
                action.dragAndDrop(source,target).perform();
                // 提交鼠标行为, 释放鼠标
                action.release().perform();

        *5. 模拟键盘操作
            Keys()类提供了键盘上几乎所有按键的方法。 
            sendKeys()方法可以用来模拟键盘输入，
            除此之外，还可以用它来输入键盘上的按键， 甚至是组合键， 如 Ctrl+A、 Ctrl+C 等。
                WebDriver driver = new ChromeDriver();
                driver.get("https://www.baidu.com");
                WebElement input = driver.findElement(By.id("kw"));
                //输入框输入内容
                input.sendKeys("seleniumm");
                Thread.sleep(2000);
                //删除多输入的一个 m
                input.sendKeys(Keys.BACK_SPACE);
                Thread.sleep(2000);
                //输入空格键+“教程”
                input.sendKeys(Keys.SPACE);
                input.sendKeys("教程");
                Thread.sleep(2000);
                //ctrl+a 全选输入框内容
                input.sendKeys(Keys.CONTROL,"a");
                Thread.sleep(2000);
                //ctrl+x 剪切输入框内容
                input.sendKeys(Keys.CONTROL,"x");
                Thread.sleep(2000);
                //ctrl+v 粘贴内容到输入框
                input.sendKeys(Keys.CONTROL,"v");
                Thread.sleep(2000);
                //通过回车键盘来代替点击操作
                input.sendKeys(Keys.ENTER);
                Thread.sleep(2000);
                driver.quit();
            上面的代码没有什么实际意义，只是展示了模拟键盘各种按键与组合键的用法。
                import org.openqa.selenium.Keys;
                在使用键盘按键方法前需要先导入 keys 类。
                以下为常用的键盘操作：
                sendKeys(Keys.BACK_SPACE) 回格键（BackSpace）
                sendKeys(Keys.SPACE) 空格键(Space)
                sendKeys(Keys.TAB) 制表键(Tab)
                sendKeys(Keys.ESCAPE) 回退键（Esc）
                sendKeys(Keys.ENTER) 回车键（Enter）
                sendKeys(Keys.CONTROL,‘a’) 全选（Ctrl+A）
                sendKeys(Keys.CONTROL,‘c’) 复制（Ctrl+C）
                sendKeys(Keys.CONTROL,‘x’) 剪切（Ctrl+X）
                sendKeys(Keys.CONTROL,‘v’) 粘贴（Ctrl+V）
                sendKeys(Keys.F1) 键盘 F1
                ……
                sendKeys(Keys.F12) 键盘 F12
            
        *6. 多窗口切换
            在页面操作过程中有时候点击某个链接会弹出新的窗口， 这时就需要主机切换到新打开的窗口上进行操作。
            WebDriver提供了switchTo().window()方法可以实现在不同的窗口之间切换。
            getWindowHandle()： 获得当前窗口句柄。
            getWindowHandles()： 返回的所有窗口的句柄到当前会话。
            switchTo().window()： 用于切换到相应的窗口,用于不同窗口的切换。
                WebDriver driver = new ChromeDriver();
                driver.get("https://www.baidu.com");
                //获得当前窗口句柄
                String search_handle = driver.getWindowHandle();
                //打开百度注册窗口
                driver.findElement(By.linkText("登录")).click();
                Thread.sleep(3000);
                driver.findElement(By.linkText("立即注册")).click();
                //获得所有窗口句柄
                Set<String> handles = driver.getWindowHandles();
                //判断是否为注册窗口， 并操作注册窗口上的元素
                for(String handle : handles){
                if (handle.equals(search_handle)==false){
                    //切换到注册页面
                    driver.switchTo().window(handle);
                    }
                }
                System.out.println("now register window!");
                Thread.sleep(2000);
                driver.findElement(By.name("userName")).clear();
                driver.findElement(By.name("userName")).sendKeys("user name");
                driver.findElement(By.name("phone")).clear();
                driver.findElement(By.name("phone")).sendKeys("phone number");
                //......
                Thread.sleep(2000);
                //关闭当前窗口
                driver.close();
                driver.quit();

        7. 多表单切换
            在 Web 应用中经常会遇到 frame/iframe 表单嵌套页面的应用， WebDriver 只能在一个页面上对元素识别与 定位， 
            对于 frame/iframe 表单内嵌页面上的元素无法直接定位。 
            这时就需要通过 switchTo().frame()方法将当前定位的主体切换为 frame/iframe 表单的内嵌页面中。
            如126邮箱登录框的结构大概是这样子的，想要操作登录框必须要先切换到iframe表单。有页面如下:
                <html>
                  <body>
                    ...
                    <iframe id="x-URS-iframe" ...>
                      <html>
                         <body>
                           ...
                           <input name="email" >
            举例,登录126邮箱
                WebDriver driver = new ChromeDriver();
                driver.get("http://www.126.com");
                WebElement xf = driver.findElement(By.xpath("//*[@id='loginDiv']/iframe"));
                driver.switchTo().frame(xf);
                driver.findElement(By.name("email")).clear();
                driver.findElement(By.name("email")).sendKeys("username");
                driver.findElement(By.name("password")).clear();
                driver.findElement(By.name("password")).sendKeys("password");
                driver.findElement(By.id("dologin")).click();
                // 如果完成了在当前表单上的操作，通过switchTo().defaultContent()方法跳出表单。
                //返回到最顶层的frame/iframe
                driver.switchTo().defaultContent();

        8. 设置元素等待
            WebDriver提供了两种类型的等待：显式等待和隐式等待。
            1.显示等待
                WebDriver提供了显式等待方法，专门针对某个元素进行等待判断。 
                WebDriverWait类是由WebDirver提供的等待方法。
                    在设置时间内，默认每隔一段时间检测一次当前页面元素是否存在，如果超过设置时间检测不到则抛出异常。
                    具体格式如下：
                        WebDriverWait(driver, 10, 1)
                        driver: 浏览器驱动. 10: 最长超时时间, 默认以秒为单位。 1: 检测的的间隔|步长时间, 默认为 0.5s。
              举例:
                WebDriver driver = new ChromeDriver();
                driver.get("https://www.baidu.com");
                //显式等待， 针对某个元素等待
                WebDriverWait wait = new WebDriverWait(driver,10,1);
                wait.until(new ExpectedCondition<WebElement>(){
                  @Override
                  public WebElement apply(WebDriver text) {
                        return text.findElement(By.id("kw"));
                      }
                }).sendKeys("selenium");
                driver.findElement(By.id("su")).click();
                Thread.sleep(2000);
                driver.quit();
            2. 隐式等待
            WebDriver 提供了几种方法来等待元素。
                implicitlyWait。识别对象时的超时时间。过了这个时间如果对象还没找到的话就会抛出NoSuchElement异常。
                setScriptTimeout。异步脚本的超时时间。WebDriver可以异步执行脚本，这个是设置异步执行脚本脚本返回结果的超时时间。
                pageLoadTimeout。页面加载时的超时时间。因为WebDriver会等页面加载完毕再进行后面的操作，所以如果页面超过设置时间依然没有加载完成，那么WebDriver就会抛出异常。
              举例: 
                WebDriver driver = new ChromeDriver();
                //页面加载时的超时时间, 页面加载超时时间设置为 5s
                driver.manage().timeouts().pageLoadTimeout(5, TimeUnit.SECONDS);
                driver.get("https://www.baidu.com/");
                //识别元素时的超时时间, 定位对象时给 10s 的时间, 如果 10s 内还定位不到则抛出异常
                driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
                driver.findElement(By.id("kw")).sendKeys("selenium");
                //异步脚本的超时时间设置成 3s
                driver.manage().timeouts().setScriptTimeout(3, TimeUnit.SECONDS);
                driver.quit();
                
        9. 下拉框选择
            碰到下拉框，WebDriver提供了Select类来处理下接框。
            Select类用于定位select标签。 selectByValue()方法符用于选取<option>标签的value值。
                select.selectByVisibleText(“A”);
                select.selectByValue(“1”); 
                select.deselectAll();
                select.deselectByValue(“1”);
                select.deselectByVisibleText(“A”);
                select.getAllSelectedOptions();
                select.getFirstSelectedOption(); 
            如页面:
                <select id="nr" name="NR">
                  <option value="10" selected>每页显示 10 条</option>
                  <option value="20">每页显示 20 条</option>
                  <option value="50">每页显示 50 条</option>
                <select>
            操作下接框代码如下：
                WebDriver driver = new ChromeDriver();
                driver.get("https://www.baidu.com");
                driver.findElement(By.linkText("设置")).click();
                driver.findElement(By.linkText("搜索设置")).click();
                Thread.sleep(2000);
                //<select>标签的下拉框选择
                WebElement el = driver.findElement(By.xpath("//select"));
                Select sel = new Select(el);
                sel.selectByValue("20");
                Thread.sleep(2000);
                driver.quit();

        10. 警告框处理
            在 WebDriver中处理JavaScript所生成的alert、confirm以及prompt十分简单，
            具体做法是使用switch_to_alert()方法定位到alert/confirm/prompt，
            然后使用text/accept/dismiss/sendKeys等方法进行操作。
                getText()： 返回 alert/confirm/prompt 中的文字信息。
                accept()： 接受现有警告框。
                dismiss()： 解散现有警告框。
                sendKeys(keysToSend)： 发送文本至警告框。
                keysToSend： 将文本发送至警告框。
            如:百度搜索设置弹出的窗口是不能通过前端工具对其进行定位的，可以通过switchTo().alert()方法接受这个弹窗。
                WebDriver driver = new ChromeDriver();
                driver.get("https://www.baidu.com");
                driver.findElement(By.linkText("设置")).click();
                driver.findElement(By.linkText("搜索设置")).click();
                Thread.sleep(2000);
                //保存设置
                driver.findElement(By.className("prefpanelgo")).click();
                //接收弹窗
                driver.switchTo().alert().accept();
                Thread.sleep(2000);
                driver.quit();
            
        11. 文件上传
            对于通过input标签实现的上传功能，可以将其看作是一个输入框，即通过sendKeys()指定本地文件路径的方式实现文件上传。
            创建upfile.html文件，代码如下：
                <html>
                <head>
                <meta http-equiv="content-type" content="text/html;charset=utf-8" />
                <title>upload_file</title>
                <link href="http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css" rel="stylesheet" />
                </head>
                <body>
                  <div class="row-fluid">
                    <div class="span6 well">
                    <h3>upload_file</h3>
                      <input type="file" name="file" />
                    </div>
                  </div>
                </body>
                <script src="http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.js"></scrip>
                </html>
            通过sendKeys()方法来实现文件上传
                WebDriver driver = new ChromeDriver();
                File file = new File("./upfile.html");
                String filePath = file.getAbsolutePath();
                driver.get(filePath);
                //定位上传按钮， 添加本地文件
                driver.findElement(By.name("file")).sendKeys("D:/upload_file.txt");
                Thread.sleep(5000);
                driver.quit();

        12. 浏览器cookie操作
            需要验证浏览器中Cookie是否正确， 因为基于真实Cookie的测试是无法通过白盒测试和集成测试进行的。
            WebDriver提供了操作Cookie的相关方法可以读取、 添加和删除Cookie信息。
            WebDriver 操作Cookie的方法：
                getCookies() 获得所有 cookie 信息。
                getCookieNamed(String name) 返回字典的key为“name”的Cookie信息。
                addCookie(cookie dict) 添加Cookie。“cookie_dict”指字典对象，必须有 name和value值。
                deleteCookieNamed(String name) 删除Cookie 信息。 “name”是要删除的 cookie的名称； “optionsString” 是该Cookie的选项，目前支持的选项包括“路径” ， “域” 。
                deleteAllCookies() 删除所有 cookie 信息。
            举例:
                WebDriver driver = new ChromeDriver();
                driver.get("https://www.baidu.com");
                Cookie c1 = new Cookie("name", "key-aaaaaaa");
                Cookie c2 = new Cookie("value", "value-bbbbbb");
                driver.manage().addCookie(c1);
                driver.manage().addCookie(c2);
                //获得 cookie
                Set<Cookie> coo = driver.manage().getCookies();
                System.out.println(coo);
                //删除所有 cookie
                //driver.manage().deleteAllCookies();
                driver.quit();

        13. 调用JavaScript代码
            WebDriver提供了executeScript()方法来执行JavaScript代码。
            Web driver对Java Script的调用是通过JavascriptExecutor来实现的，例如：
                JavascriptExecutor js = (JavascriptExecutor) driver;
                js.executeScript("JS脚本");
            虽然WebDriver提供了操作浏览器的前进和后退方法，但对于浏览器滚动条并没有提供相应的操作方法。
            可以借助JavaScript来控制浏览器的滚动条。
            用于调整浏览器滚动条位置的JavaScript代码如下：
                <!-- window.scrollTo(左边距,上边距); -->
                window.scrollTo(0,450);
            window.scrollTo()方法用于设置浏览器窗口滚动条的水平和垂直位置。
            方法的第一个参数表示水平的左间距，第二个参数表示垂直的上边距。
                WebDriver driver = new ChromeDriver();
                //设置浏览器窗口大小
                //通过window().setSize()方法将浏览器窗口设置为固定宽高显示，目的是让窗口出现水平和垂直滚动条。
                //然后通过executeScript()方法执行JavaScripts代码来移动滚动条的位置。
                driver.manage().window().setSize(new Dimension(700, 600));
                driver.get("https://www.baidu.com");
                //进行百度搜索
                driver.findElement(By.id("kw")).sendKeys("webdriver api");
                driver.findElement(By.id("su")).click();
                Thread.sleep(2000);
                //将页面滚动条拖到底部
                ((JavascriptExecutor)driver).executeScript("window.scrollTo(100,450);");
                Thread.sleep(3000);
                driver.quit();

        *14. 无头模式|静默模式|headless mode
            0. 介绍:
            通过Selenium运行自动化测试时，必须要启动浏览器，浏览器的启动与关闭必然会影响执行效率，
                而且还会干扰其它事情（本机运行的话）。
            可以把自动化测试的运行放在后台, 三种方式:
                1. htmlunit 项目可以模拟浏览器运行，是一个没有界面的浏览器，运行速度快。
                2. PhantomJS 是一个基于webkit的JavaScript API。它使用QtWebKit作为它核心浏览器的功能，使用webkit来编译解释执行JavaScript代码。任何你可以在基于webkit浏览器做的事情，它都能做到。
                    phantomjs这个坑比较多的，并且遇到问题也看不到页面，无法排查问题。
                3. Chrome-headless 模式，Google 自己出的无头浏览器模式。
                    Google 针对 Chrome 浏览器 59版之后新增加的一种模式，可以不打开UI界面的情况下使用 Chrome 浏览器，所以运行效果与 Chrome 保持完美一致。
            1. 用法:
                Java: 
                    ChromeOptions chromeOptions = new ChromeOptions();
                    chromeOptions.addArguments("--headless");
                    WebDriver driver = new ChromeDriver(chromeOptions);
                Python:
                    from selenium import webdriver
                    from selenium.webdriver.chrome.options import Options
                    chrome_options = Options()
                    chrome_options.add_argument('--headless')
                    driver = webdriver.Chrome(chrome_options=chrome_options)

        *15. ChromeOptions & DesiredCapabilities
            多个参数设置以及设置代理
            DesiredCapabilities caps = DesiredCapabilities.chrome();
            DRIVER_PATH = FileUtil.getCommonProp("chrome.path");
            System.setProperty("webdriver.chrome.driver",FileUtil.getCommonProp("chrome.driver.path"));
            ChromeOptions options = new ChromeOptions();
            //options.addExtensions(new File("/path/to/extension.crx"))
            options.setBinary(DRIVER_PATH); //注意chrome和chromeDirver的区别
            System.setProperty("webdriver.chrome.driver", DRIVER_PATH);
            options.addArguments("test-type"); //ignore certificate errors
            options.addArguments("headless");// headless mode
            options.addArguments("disable-gpu"); 
            //options.addArguments("log-path=chromedriver.log");
            //options.addArguments("screenshot"); 每打开一个页面就截图
            //options.addArguments("start-maximized"); 最大化
            //Use custom profile
            Map<String, Object> prefs = new HashMap<String, Object>();
            //prefs.put("profile.default_content_settings.popups", 0);
            //http://stackoverflow.com/questions/28070315/python-disable-images-in-selenium-google-chromedriver
            prefs.put("profile.managed_default_content_settings.images",2); //禁止下载加载图片
            options.setExperimentalOption("prefs", prefs);
            caps.setJavascriptEnabled(true);
            caps.setCapability(ChromeOptions.CAPABILITY, options);        
            //caps.setCapability("takesScreenshot", false);
            /* Add the WebDriver proxy capability.
            Proxy proxy = new Proxy();
            proxy.setHttpProxy("myhttpproxy:3337");
            capabilities.setCapability("proxy", proxy);
            */
            WebDriver mDriver = new ChromeDriver(caps);

        *16. 获取窗口|元素截图
            自动化用例是由程序去执行，因此有时候打印的错误信息并不十分明确。
            如果在脚本执行出错的时候能对当前窗口截图保存，那么通过图片就可以非常直观地看出出错的原因。 
            WebDriver提供了截图函数getScreenshotAs()来截取当前窗口。 
                WebDriver driver = new ChromeDriver();
                driver.get("https://www.baidu.com");
                // 转换 WebDriver 为可截图对象,完成屏幕截图.
                // 也可以转换 WebElement 为可截图对象,完成指定元素的截图.
                File srcFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
                // import org.apache.commons.io.FileUtils;
                //FileUtils.copyFile(srcFile,new File("d:\\screenshot.png"));
                // import com.google.common.io.Files;
                Files.copy(srcFile,new File("d:\\screenshot.png"));
                driver.quit();

  -- 练习：
    1. headless = 单一页面豆瓣影评内容爬取(3个内容，至少一个使用XPath定位)
        模拟豆瓣登录
//*[@id="4001"]/div[1]/h3/a[1]
//*[@id="1"]/h3/a

/html/body/div[1]/div[3]/div[1]/div[3]/div[1]/div/div[1]/h3/a[1]
/html/body/div[1]/div[3]/div[1]/div[3]/div[2]/h3/a
/html/body/div[1]/div[3]/div[1]/div[3]/div[3]/h3/a
