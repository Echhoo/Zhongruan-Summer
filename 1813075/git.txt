一、	Git简介：
1.	Git（c语言）linux
2.	集中式vs分布式
Git：分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库。和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多。
3.	Git安装
4.	创建版本库
 
初始化一个Git仓库，使用git init命令。Ls -ah可视化
添加文件到Git仓库，分两步：
 
1.	使用命令git add <file>，注意，可反复多次使用，添加多个文件；
2.	使用命令git commit -m <message>，完成。
注意：Windows不要使用记事本，使用notepad++
二、	时光倒流
git status命令可以让我们时刻掌握仓库当前的状态
git diff查看difference
1.	版本回退（修改指针HEAD）
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
例子:git reset --hard HEAD^ “返回上个版本”
git reset --hard 1094a “返回id开头为1094a的版本”
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
$ git log --pretty=oneline 查看版本信息更简洁
	要重返未来，用git reflog 。（记录历史命令）查看命令历史，以便确定要回到未来的哪个版本。
用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写成HEAD~100。
2.	工作区和暂存区
	工作区（Working Directory）：
在电脑里能看到的目录，比如learngit文件夹是一个工作区。
	版本库（Repository）：
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库 : 名stage（或者叫index）的暂存区，git自动创建的第一个分支master，指向master的HEAD指针

git status查看文件状态：
 
git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。

3.	管理分支
Git跟踪并管理的是修改，而非文件。
提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
 
每次修改，如果不用git add到暂存区，那就不会加入到commit中。

4.	撤销修改
1.只进行了修改
	git checkout -- file可以丢弃工作区的修改,就是让这个文件回到最近一次git commit或git add时的状态
	git restore <file>作用相同
2.已经使用git add提交
git checkout -- <file>
3.已经git commit提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库
5.	删除文件
	   命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本（git checkout -- <file>），你会丢失最近一次提交后你修改的内容。
三、	远程仓库
	Git远程仓库，创建ssh key：
打开Shell（Windows下打开Git Bash），创建SSH Key：
ssh-keygen -t rsa -C 1799956902@qq.com
id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥
	Github绑定
1. 添加远程库
$ git remote add origin git@github.com:Echhoo/learngit.git
远程库名为origin
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
2. 从远程库克隆
  要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但ssh协议速度最快。
	https: https://github.com/Echhoo/gitskills.git
	ssh: git@github.com:Echhoomichaelliao/gitskills.git
四、	分支管理
Git的分支无论创建、切换和删除分支，Git在1秒钟之内就能完成。
1. 创建与合并分支
HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。master主分支。
当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：
 
假如我们在dev上的工作完成了，就可以把dev合并到master上。再删除dev分支。
查看分支：git branch	当前分支前面会标一个*号。
创建分支：git branch <name>
切换分支：git checkout <name>或者git switch <name>
创建+切换分支：git checkout -b <name>或者git switch -c <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

2. 解决冲突
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。

	 
3. 分支管理策略
$ git merge --no-ff -m "merge with no-ff" dev：表示禁用Fast forward
 
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
分支策略：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
团队分支：
 
4.  bug分支
Git stash隐藏工作区，在master分支上修复，就从master创建临时分支，然后删除分支。
接着回到dev分支，git status查看dev工作区，是干净的，通过git stash pop，回到工作现场。
同样的bug，要在dev上修复，我们只需要把4c805e2 fix bug 101这个提交所做的修改“复制”到dev分支。注意：我们只想复制4c805e2 fix bug 101这个提交所做的修改，使用cherry-pick命令，避免重复劳动。
5.  Feature分支
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
6.  多人协作
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
7.Rebase
输入命令git rebase, 再用git log看看. 原本分叉的提交现在变成一条直线
Git把我们本地的提交“挪动”了位置，放到了f005ed4 (origin/master) set exit=1之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于d1be385 init hello，而是基于f005ed4 (origin/master) set exit=1，但最后的提交7e61ed4内容是一致的。

rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比
五、	标签管理
tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。
1.  创建标签
切换到需要打标签的分支上，敲命令git tag <name>就可以打一个新标签。
可以用命令git tag查看所有标签。
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息
git show <tagname>查看标签信息
2.  操作标签
$ git tag -d v0.1 删除标签
推送某个标签到远程，使用命令git push origin <tagname>
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
六、	使用github
git clone git@github.com:myself/bootstrap.git
一定要从自己的账号下clone仓库，才能推送修改。如果从作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，将不能推送修改。
在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。
七、	自定义Git
Git有多种命令 如：$ git config --global color.ui true 改变颜色
1.  忽略特殊文件 
在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
忽略文件的原则是：
	忽略操作系统自动生成的文件，比如缩略图等；
	忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
	忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
检验.gitignore的标准是git status命令是不是说working directory clean。
Windows:如果你在资源管理器里新建一个.gitignore文件，提示必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了。
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理。
2.  配置别名
例子：git config --global alias.st status status别名设置为st
配置文件：
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
每个仓库的Git配置文件都放在.git/config文件中：
别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中，配置别名也可以直接修改这个文件
3.	搭建Git服务器
搭建Git服务器需要准备一台运行Linux的机器，用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装
第一步，安装git
第二步，创建一个git用户，用来运行git服务
第三步，创建证书登
第四步，初始化Git仓库
第五步，禁用shell登录
第六步，克隆远程仓库
要方便管理公钥，用Gitosis；
要像SVN那样变态地控制权限，用Gitolite。
八、	使用SourceTree
使用SourceTree可以以图形界面操作Git，省去了敲命令的过程，对于常用的提交、分支、推送等操作来说非常方便。
SourceTree使用Git命令执行操作，出错时，仍然需要阅读Git命令返回的错误信息。
